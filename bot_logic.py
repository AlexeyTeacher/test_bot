from datetime import datetime
from sqlalchemy import desc, func

from telegram import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ConversationHandler

from db import session
from config import (END, FIRST, HELP, logger, DOWNLOAD_START, DOWNLOAD_END, LAST_SELFIE_START,
                    SCHOOL_PHOTO_START, STORY_START, GPT_START, BASES_START, FIRST_LOVE_START, LAST_SELFIE_END,
                    SCHOOL_PHOTO_END, STORY_END, GPT_END, BASES_END, FIRST_LOVE_END, OWNER_LOGIN)
from models import User, ContentType, Category, History, Document

USER_BASE = {}


def start(update, context):
    """–°—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        login = update.message.from_user.name
        old_user = session.query(User).filter(User.login == login).first()
        if old_user is None:
            new_user = User(
                login=login,
                name=update.message.from_user.full_name,
                created_at=datetime.now()
            )
            session.add(new_user)
            session.commit()
        logger.info(f'{login} >>> –ù–∞—á–∞–ª —Å–µ–∞–Ω—Å')
        categories = session.query(Category).all()
        keyboard = [
            [
                InlineKeyboardButton(categories[0].name, callback_data=str(LAST_SELFIE_START)),
                InlineKeyboardButton(categories[1].name, callback_data=str(SCHOOL_PHOTO_START)),
            ],
            [
                InlineKeyboardButton(categories[2].name, callback_data=str(STORY_START)),
                InlineKeyboardButton(categories[3].name, callback_data=str(GPT_START)),
            ],
            [
                InlineKeyboardButton(categories[4].name, callback_data=str(BASES_START)),
                InlineKeyboardButton(categories[5].name, callback_data=str(FIRST_LOVE_START)),
            ],
            [
                InlineKeyboardButton("üÜò –°–ø—Ä–∞–≤–∫–∞", callback_data=str(HELP))
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text(
            f"ü¶æ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, *{update.message.from_user.first_name}*! "
            f"–Ø –±–æ—Ç –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ —Å–æ –º–Ω–æ–π(–∞–≤—Ç–æ—Ä–æ–º –±–æ—Ç–∞).\n"
            f"–¢—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ, –∞ —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —á—Ç–æ-—Ç–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –º—ã –ª—É—á—à–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å \n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ –≤—ã —Å–µ–π—á–∞—Å —Ö–æ—Ç–∏—Ç–µ üëá", reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logger.error(f'{e}')
    return FIRST


def stop(update, context):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop"""
    try:
        name = str(update.message.from_user.name)
        update.message.reply_text(f'üññ –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {update.message.from_user.first_name}! \n'
                                  f'–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
        logger.info(f'{name} >>> /stop')
    except Exception as e:
        logger.error(f'{e}')
    return ConversationHandler.END


def end(update, context):
    """–ü–ª–∞–Ω–æ–≤—ã–π –≤—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–•–≤–∞—Ç–∏—Ç" """
    try:
        query = update.callback_query
        query.answer()
        name = str(query.from_user.name)
        query.edit_message_text(text=f'üññ –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ, {query.from_user.first_name}! \n'
                                     f'–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start')
        logger.info(f'{name} >>> –ó–∞–∫–æ–Ω—á–∏–ª —Å–µ–∞–Ω—Å')
    except Exception as e:
        logger.error(f'{e}')
    return ConversationHandler.END


def get_standard_keyboard():
    categories = session.query(Category).all()

    keyboard = [
        [
            InlineKeyboardButton(categories[0].name, callback_data=str(LAST_SELFIE_START)),
            InlineKeyboardButton(categories[1].name, callback_data=str(SCHOOL_PHOTO_START)),
        ],
        [
            InlineKeyboardButton(categories[2].name, callback_data=str(STORY_START)),
            InlineKeyboardButton(categories[3].name, callback_data=str(GPT_START)),
        ],
        [
            InlineKeyboardButton(categories[4].name, callback_data=str(BASES_START)),
            InlineKeyboardButton(categories[5].name, callback_data=str(FIRST_LOVE_START)),
        ],
        [
            InlineKeyboardButton("üÜò –°–ø—Ä–∞–≤–∫–∞", callback_data=str(HELP)),
            InlineKeyboardButton("üíî –•–≤–∞—Ç–∏—Ç", callback_data=str(END))

        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    return reply_markup


def draw_keyboard(update):
    """–†–∏—Å—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ–Ω—é"""
    reply_markup = get_standard_keyboard()
    try:
        update.message.reply_text(text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞ üëá", reply_markup=reply_markup)
    except AttributeError as e:
        logger.error(f'{e}')
        update.callback_query.edit_message_text(text="üëá –í—ã–±–∏—Ä–∞–π—Ç–µ —Å–Ω–æ–≤–∞ üëá", reply_markup=reply_markup)


def github(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏. –¢—Ä–∏–≥–µ—Ä –Ω–∞ /github"""
    try:
        update.message.reply_text(
            text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑ —á–µ–≥–æ —è —Å–æ—Å—Ç–æ—é –Ω–∞ [github](https://github.com/AlexeyTeacher/test_bot)",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_download(update, context):
    """–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –¢—Ä–∏–≥–µ—Ä –Ω–∞ /download"""
    categories = (session.query(
        Category.id, Category.name, ContentType.name
    ).join(ContentType, Category.content_type_id == ContentType.id).all())
    text_categories = '\n'.join([f'`{c[0]}`. {c[1]} / _({c[2]})_' for c in categories])
    try:
        update.message.reply_text(
            text=f"–ù–∞–ø–∏—à–∏—Ç–µ *—á–∏—Å–ª–æ–º* –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n{text_categories}",
            parse_mode='Markdown')
    except Exception as e:
        logger.error(f'{e}')
    return DOWNLOAD_START


def download_start(update, context):
    """–í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –î–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç."""
    category_id = update.message.text.strip().replace('‚Ññ', '')
    category = session.query(Category.name, ContentType.name, ContentType.slug
                             ).join(ContentType, Category.content_type_id == ContentType.id
                                    ).filter(Category.id == int(category_id)).first()
    update.message.reply_text(
        text=f"–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–µ *{category[1].lower()}* –Ω–∞ —Ç–µ–º—É: *{category[0]}*",
        parse_mode='Markdown')

    USER_BASE[str(update.message.from_user.name)] = {"last_command": category_id}
    return DOWNLOAD_END


def download_end(update, context):
    """–¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–∏—Å—Ç–µ–º—É"""
    login = str(update.message.from_user.name)
    user = session.query(User).filter(User.login == login).first()
    category_id = USER_BASE.get(user.login, {}).get('last_command')

    category = session.query(Category.name, ContentType.name, ContentType.slug
                             ).join(ContentType, Category.content_type_id == ContentType.id
                                    ).filter(Category.id == int(category_id)).first()
    try:
        if category[2] == "image":
            photo = update.message.photo[-1]
            photo_file = photo.get_file()
            filename = 'documents/{}.png'.format(photo.file_id)
            photo_file.download(filename)
            update.message.reply_text('–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')
            new_doc = Document(
                user_id=user.id,
                category_id=category_id,
                name=f"{category[0]} –æ—Ç {user.name}",
                filename=filename
            )
        elif category[2] == "voice":
            voice = update.message.voice
            file_id = voice.file_id
            file = context.bot.get_file(file_id)
            filename = 'documents/{}.ogg'.format(voice.file_id)
            file.download(filename)
            update.message.reply_text('–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.')

            new_doc = Document(
                user_id=user.id,
                category_id=category_id,
                name=f"{category[0]} –æ—Ç {user.name}",
                filename=filename
            )
        else:
            text = update.message.text.strip()
            new_doc = History(
                user_id=user.id,
                category_id=category_id,
                name=f"{category[0]} –æ—Ç {user.name}",
                description=text
            )
        session.add(new_doc)
        session.commit()
        draw_keyboard(update)
    except Exception as e:
        logger.error(f'{e}')
    return FIRST


def _run_standard(update, category_name):
    query = update.callback_query
    query.answer()
    query.edit_message_text(f'–ù–∞–ø–∏—à–∏—Ç–µ *—á–∏—Å–ª–æ–º* —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞ –ø–æ —Ç–µ–º–µ: {category_name}\n'
                            f'*–í–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–∞:*\n'
                            f'1. –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ—Ä–∞ –±–æ—Ç–∞\n'
                            f'2. –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞\n'
                            f'3. –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n',
                            parse_mode='Markdown')


def _get_content(update, context, content_type, variant_answer_num, category_id):
    chat_id = update.message.chat_id
    if content_type == 'image':
        if variant_answer_num == '1':
            user = session.query(User).filter(User.login == OWNER_LOGIN).first()
            photo_path = session.query(Document.filename).filter(
                Document.user_id == user.id, Document.category_id == category_id
            ).order_by(desc(Document.created_at)).first()[0]
        elif variant_answer_num == '2':
            login = update.message.from_user.name
            user = session.query(User).filter(User.login == login).first()
            photo_path = session.query(Document.filename).filter(
                Document.user_id == user.id, Document.category_id == category_id
            ).order_by(desc(Document.created_at)).first()
            if photo_path is None:
                update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ")
                return
            else:
                photo_path = photo_path[0]
        else:
            photo_path = session.query(Document.filename
                                       ).filter(Document.category_id == category_id).order_by(func.random()).first()[0]
        context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, 'rb'))
    elif content_type == 'text':
        if variant_answer_num == '1':
            user = session.query(User).filter(User.login == OWNER_LOGIN).first()
            history = session.query(History).filter(
                History.user_id == user.id, History.category_id == category_id
            ).order_by(desc(History.created_at)).first()
        elif variant_answer_num == '2':
            login = update.message.from_user.name
            user = session.query(User).filter(User.login == login).first()
            history = session.query(History).filter(
                History.user_id == user.id, History.category_id == category_id
            ).order_by(desc(History.created_at)).first()
            if history is None:
                update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç")
                return
        else:
            history = session.query(History).filter(History.category_id == category_id).order_by(func.random()).first()
        update.message.reply_text(f"*{history.name}*\n"
                                  f"{history.description}", parse_mode='Markdown')
        if content_type == 'image':
            if variant_answer_num == '1':
                user = session.query(User).filter(User.login == OWNER_LOGIN).first()
                photo_path = session.query(Document.filename).filter(
                    Document.user_id == user.id, Document.category_id == category_id
                ).order_by(desc(Document.created_at)).first()[0]
            elif variant_answer_num == '2':
                login = update.message.from_user.name
                user = session.query(User).filter(User.login == login).first()
                photo_path = session.query(Document.filename).filter(
                    Document.user_id == user.id, Document.category_id == category_id
                ).order_by(desc(Document.created_at)).first()
                if photo_path is None:
                    update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ")
                    return
                else:
                    photo_path = photo_path[0]
            else:
                photo_path = session.query(Document.filename
                                           ).filter(Document.category_id == category_id).order_by(
                    func.random()).first()[0]
            context.bot.send_photo(chat_id=chat_id, photo=open(photo_path, 'rb'))
    if content_type == 'voice':
        if variant_answer_num == '1':
            user = session.query(User).filter(User.login == OWNER_LOGIN).first()
            voice_path = session.query(Document.filename).filter(
                Document.user_id == user.id, Document.category_id == category_id
            ).order_by(desc(Document.created_at)).first()[0]
        elif variant_answer_num == '2':
            login = update.message.from_user.name
            user = session.query(User).filter(User.login == login).first()
            voice_path = session.query(Document.filename).filter(
                Document.user_id == user.id, Document.category_id == category_id
            ).order_by(desc(Document.created_at)).first()
            if voice_path is None:
                update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ")
                return
            else:
                voice_path = voice_path[0]
        else:
            voice_path = session.query(Document.filename
                                       ).filter(Document.category_id == category_id).order_by(func.random()).first()[0]
        context.bot.send_voice(chat_id=chat_id, voice=open(voice_path, 'rb'))


def run_selfie(update, context):
    """–ö–Ω–æ–ø–∫–∞ –°–µ–ª—Ñ–∏"""
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'last_selfie').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return LAST_SELFIE_END


def selfie(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–ª—Ñ–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'last_selfie').first()[0]
    try:
        _get_content(update, context, content_type='image', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_school_photo(update, context):
    """–ö–Ω–æ–ø–∫–∞ –®–∫–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ"""
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'school_photo').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return SCHOOL_PHOTO_END


def school_photo(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –®–∫–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'school_photo').first()[0]
    try:
        _get_content(update, context, content_type='image', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_story(update, context):
    """–ö–Ω–æ–ø–∫–∞ –ì–ª–∞–≤–Ω–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ"""
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'school_photo').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return STORY_END


def story(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ì–ª–∞–≤–Ω–æ–µ —É–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'story').first()[0]
    try:
        _get_content(update, context, content_type='text', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_gpt(update, context):
    """–ö–Ω–æ–ø–∫–∞ GPT """
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'gpt').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return GPT_END


def gpt(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç GPT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'gpt').first()[0]
    try:
        _get_content(update, context, content_type='voice', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_bases(update, context):
    """–ö–Ω–æ–ø–∫–∞ –†–∞–∑–Ω–∏—Ü–∞ –≤ –ë–î"""
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'bases').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return BASES_END


def bases(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –†–∞–∑–Ω–∏—Ü—É –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'bases').first()[0]
    try:
        _get_content(update, context, content_type='voice', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def run_first_love(update, context):
    """–ö–Ω–æ–ø–∫–∞ –ü–µ—Ä–≤–∞—è –ª—é–±–æ–≤—å"""
    try:
        category_name = session.query(Category.name).filter(Category.slug == 'first_love').first()[0]
        _run_standard(update, category_name)
    except Exception as e:
        logger.error(f'{e}')
    return FIRST_LOVE_END


def first_love(update, context):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "–ü–µ—Ä–≤—É—é –ª—é–±–æ–≤—å" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∞"""
    variant = update.message.text.strip().replace('‚Ññ', '')
    category_id = session.query(Category.id).filter(Category.slug == 'first_love').first()[0]
    try:
        _get_content(update, context, content_type='voice', variant_answer_num=variant, category_id=category_id)
    except Exception as e:
        logger.error(f'{e}')
    draw_keyboard(update)
    return FIRST


def help_(update, context):
    """–°–ø—Ä–∞–≤–∫–∞"""
    categories = session.query(Category).all()

    keyboard = [
        [
            InlineKeyboardButton(categories[0].name, callback_data=str(LAST_SELFIE_START)),
            InlineKeyboardButton(categories[1].name, callback_data=str(SCHOOL_PHOTO_START)),
        ],
        [
            InlineKeyboardButton(categories[2].name, callback_data=str(STORY_START)),
            InlineKeyboardButton(categories[3].name, callback_data=str(GPT_START)),
        ],
        [
            InlineKeyboardButton(categories[4].name, callback_data=str(BASES_START)),
            InlineKeyboardButton(categories[5].name, callback_data=str(FIRST_LOVE_START)),
        ],
        [
            InlineKeyboardButton("üíî –•–≤–∞—Ç–∏—Ç", callback_data=str(END))
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    query = update.callback_query
    query.answer()
    task = """‚úÖ –ù–∞–ø–∏—à–∏ –Ω–∞ Python –±–æ—Ç–∞ –¥–ª—è –¢–µ–ª–µ–≥—Ä–∞–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å —Ç–æ–±–æ–π –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –∑–∞–¥–µ–ø–ª–æ–π –µ–≥–æ –∏ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç–∞—é—â–µ–≥–æ –±–æ—Ç–∞.
–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞:
- –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å 1. —Ç–≤–æ–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–µ–ª—Ñ–∏ –∏ 2. —Ñ–æ—Ç–æ –∏–∑ —Å—Ç–∞—Ä—à–µ–π —à–∫–æ–ª—ã
- –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Å—Ç –æ —Ç–≤–æ—ë–º –≥–ª–∞–≤–Ω–æ–º —É–≤–ª–µ—á–µ–Ω–∏–∏
- –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–≤–æ–π –≤–æ–π—Å:
    - —Å —Ä–∞—Å—Å–∫–∞–∑–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–æ–±—ä—è—Å–Ω—è—é —Å–≤–æ–µ–π –±–∞–±—É—à–∫–µ¬ª, —á—Ç–æ —Ç–∞–∫–æ–µ GPT (–¥–æ 1 –º–∏–Ω—É—Ç—ã)
    - –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ –æ–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É SQL –∏ NoSQL (–¥–æ 1 –º–∏–Ω—É—Ç—ã)
    - –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–≤–æ–π –ª—é–±–≤–∏ (–¥–æ 1 –º–∏–Ω—É—Ç—ã) ‚Äî –º–æ–∂–Ω–æ –≤—ã–¥—É–º–∞—Ç—å ü§´
–ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ, –Ω—É–∂–Ω–∞ –∫–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.
–°–¥–µ–ª–∞–π —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥ –∫–Ω–æ–ø–∫–∞–º–∏, –∞ —á–∞—Å—Ç—å ‚Äî —Ç–µ–∫—Å—Ç–æ–º.
"""
    text = f"*–ü—Ä–∏–≤–µ—Ç!*\n" \
           f"–ë–æ—Ç –ø–æ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∑–∞–¥–∞–Ω–∏—é –¥–ª—è –Ø–Ω–¥–µ–∫—Å –ü—Ä–∞–∫—Ç–∏–∫—É–º\n" \
           f"*–ó–∞–¥–∞–Ω–∏–µ*\n" \
           f"```\n{task}\n```" \
           f"*–ü–æ–º–∏–º–æ –∫–Ω–æ–ø–æ–∫ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" \
           f"/start - –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n" \
           f"/github - –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ –±–æ—Ç–∞\n" \
           f"/download - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç\n" \
           f"/stop - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"

    query.edit_message_text(text=text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
